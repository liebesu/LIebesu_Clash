name: 自动开发构建

on:
  push:
    branches: [dev]
    paths:
      - 'src/**'
      - 'src-tauri/**'
      - '.github/workflows/**'
      - 'package.json'
      - 'pnpm-lock.yaml'
      - 'vite.config.mts'
      - 'tsconfig.json'

permissions: write-all

env:
  CARGO_INCREMENTAL: 0
  RUST_BACKTRACE: short

concurrency:
  group: "auto-dev-build-${{ github.ref }}"
  cancel-in-progress: true

jobs:
  auto-dev-build:
    name: 自动开发构建 - macOS
    runs-on: macos-latest
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 安装 Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-darwin

      - name: Rust 缓存
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: 安装依赖 (macOS)
        run: |
          brew install openssl@3 pkg-config
          OPENSSL_DIR=$(brew --prefix openssl@3)
          echo "OPENSSL_DIR=$OPENSSL_DIR" >> $GITHUB_ENV
          echo "OPENSSL_LIB_DIR=$OPENSSL_DIR/lib" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=$OPENSSL_DIR/include" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=$OPENSSL_DIR/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV
          echo "X86_64_APPLE_DARWIN_OPENSSL_DIR=$OPENSSL_DIR" >> $GITHUB_ENV
          echo "AARCH64_APPLE_DARWIN_OPENSSL_DIR=$OPENSSL_DIR" >> $GITHUB_ENV

      - name: 安装 pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: 安装 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: pnpm

      - name: 安装前端依赖
        run: pnpm install --frozen-lockfile

      - name: 下载 mihomo 二进制文件
        run: pnpm run prebuild aarch64-apple-darwin

      - name: 构建应用
        uses: tauri-apps/tauri-action@v0
        env:
          NODE_OPTIONS: "--max_old_space_size=4096"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_SIGNING_IDENTITY: "-"
        with:
          tauriScript: pnpm
          args: --target aarch64-apple-darwin -b dmg

      - name: 检查构建产物
        run: |
          echo "=== 检查构建目录结构 ==="
          ls -la src-tauri/target/ || echo "target目录不存在"
          ls -la src-tauri/target/aarch64-apple-darwin/ || echo "target架构目录不存在"  
          ls -la src-tauri/target/aarch64-apple-darwin/release/ || echo "release目录不存在"
          ls -la src-tauri/target/aarch64-apple-darwin/release/bundle/ || echo "bundle目录不存在"
          ls -la src-tauri/target/aarch64-apple-darwin/release/bundle/dmg/ || echo "dmg目录不存在"
          
          echo "=== 查找所有dmg文件 ==="
          find src-tauri/target/ -name "*.dmg" -type f || echo "未找到dmg文件"

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: clash-verge-dev-auto-${{ github.sha }}-${{ github.run_number }}
          path: |
            src-tauri/target/aarch64-apple-darwin/release/bundle/dmg/*.dmg
            src-tauri/target/aarch64-apple-darwin/release/bundle/macos/*.app
            src-tauri/target/*/release/bundle/**/*.dmg
          if-no-files-found: warn
          retention-days: 7

      - name: 备用上传：查找并上传任何dmg文件
        if: always()
        run: |
          echo "=== 查找所有构建产物 ==="
          find src-tauri/target/ -name "*.dmg" -o -name "*.app" -o -name "*.exe" | head -20
          
          # 如果找到dmg文件，创建一个临时目录来收集它们
          if find src-tauri/target/ -name "*.dmg" | grep -q .; then
            mkdir -p ./found-artifacts
            find src-tauri/target/ -name "*.dmg" -exec cp {} ./found-artifacts/ \;
            echo "找到dmg文件并复制到 ./found-artifacts/"
          else
            echo "未找到任何dmg文件"
          fi

      - name: 上传找到的产物
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: found-artifacts-${{ github.run_number }}
          path: ./found-artifacts/*
          if-no-files-found: ignore
          retention-days: 7
