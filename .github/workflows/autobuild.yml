name: Auto Build

on:
  push:
    branches: [ main ]
  workflow_dispatch:
  schedule:
    # ÊØèÂ§©‰∏ÄÊ¨°ÔºöUTC 04:00ÔºàÂåó‰∫¨ 12:00Ôºâ
    - cron: "0 4 * * *"
permissions: write-all
env:
  TAG_NAME: autobuild
  TAG_CHANNEL: AutoBuild
  CARGO_INCREMENTAL: 0
  RUST_BACKTRACE: short
concurrency:
  group: "${{ github.workflow }} - ${{ github.head_ref || github.ref }}"
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  check_commit:
    name: Check Commit Needs Build
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Check if build needed
        id: check
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
            echo "Force build triggered"
          else
            # Check if there are commits since last autobuild tag
            if git rev-list --count autobuild..HEAD > /dev/null 2>&1; then
              COMMIT_COUNT=$(git rev-list --count autobuild..HEAD)
              if [ "$COMMIT_COUNT" -gt 0 ]; then
                echo "should_run=true" >> $GITHUB_OUTPUT
                echo "Found $COMMIT_COUNT new commits"
              else
                echo "should_run=false" >> $GITHUB_OUTPUT
                echo "No new commits"
              fi
            else
              echo "should_run=true" >> $GITHUB_OUTPUT
              echo "No autobuild tag found, building"
            fi
          fi

  update_tag:
    name: Update tag
    runs-on: ubuntu-latest
    needs: check_commit
    if: ${{ needs.check_commit.outputs.should_run == 'true' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Fetch UPDATE logs
        id: fetch_update_logs
        run: |
          if [ -f "UPDATELOG.md" ]; then
            UPDATE_LOGS=$(awk '/^## v/{if(flag) exit; flag=1} flag' UPDATELOG.md)
            if [ -n "$UPDATE_LOGS" ]; then
              echo "Found update logs"
              echo "UPDATE_LOGS<<EOF" >> $GITHUB_ENV
              echo "$UPDATE_LOGS" >> $GITHUB_ENV
              echo "EOF" >> $GITHUB_ENV
            else
              echo "No update sections found in UPDATELOG.md"
            fi
          else
            echo "UPDATELOG.md file not found"
          fi
        shell: bash

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false

      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Release AutoBuild Version
        run: pnpm release-version autobuild-latest

      - name: Set Env
        run: |
          echo "BUILDTIME=$(TZ=Asia/Shanghai date)" >> $GITHUB_ENV
          VERSION=$(jq -r .version package.json)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "DOWNLOAD_URL=https://github.com/liebesu/LIebesu_Clash/releases/download/autobuild" >> $GITHUB_ENV
        shell: bash

      - run: |
          if [ -z "$UPDATE_LOGS" ]; then
            echo "No update logs found, using default message"
            UPDATE_LOGS="More new features are now supported. Check for detailed changelog soon."
          else
            echo "Using found update logs"
          fi

          cat > release.txt << EOF
          $UPDATE_LOGS

          ## ‰∏ãËΩΩÂú∞ÂùÄ

          ### Windows (‰∏çÂÜçÊîØÊåÅWin7)
          #### Ê≠£Â∏∏ÁâàÊú¨(Êé®Ëçê)
          - [64‰Ωç(Â∏∏Áî®)](${{ env.DOWNLOAD_URL }}/LIebesu_Clash_${{ env.VERSION }}_x64-setup.exe) | [ARM64(‰∏çÂ∏∏Áî®)](${{ env.DOWNLOAD_URL }}/LIebesu_Clash_${{ env.VERSION }}_arm64-setup.exe)

          #### ÂÜÖÁΩÆWebview2Áâà(‰ΩìÁßØËæÉÂ§ßÔºå‰ªÖÂú®‰ºÅ‰∏öÁâàÁ≥ªÁªüÊàñÊó†Ê≥ïÂÆâË£Öwebview2Êó∂‰ΩøÁî®)
          - [64‰Ωç](${{ env.DOWNLOAD_URL }}/LIebesu_Clash_${{ env.VERSION }}_x64_fixed_webview2-setup.exe) | [ARM64](${{ env.DOWNLOAD_URL }}/LIebesu_Clash_${{ env.VERSION }}_arm64_fixed_webview2-setup.exe)

          ### macOS
          - [Apple MËäØÁâá(Êé®Ëçê)](${{ env.DOWNLOAD_URL }}/LIebesu_Clash_${{ env.VERSION }}_aarch64.dmg) | [IntelËäØÁâá](${{ env.DOWNLOAD_URL }}/LIebesu_Clash_${{ env.VERSION }}_x64.dmg)

          ### Linux
          #### DEBÂåÖ(DebianÁ≥ª) ‰ΩøÁî® apt ./Ë∑ØÂæÑ ÂÆâË£Ö
          - [64‰Ωç](${{ env.DOWNLOAD_URL }}/LIebesu_Clash_${{ env.VERSION }}_amd64.deb) | [ARM64](${{ env.DOWNLOAD_URL }}/LIebesu_Clash_${{ env.VERSION }}_arm64.deb) | [ARMv7](${{ env.DOWNLOAD_URL }}/LIebesu_Clash_${{ env.VERSION }}_armhf.deb)

          #### RPMÂåÖ(RedhatÁ≥ª) ‰ΩøÁî® dnf ./Ë∑ØÂæÑ ÂÆâË£Ö
          - [64‰Ωç](${{ env.DOWNLOAD_URL }}/LIebesu_Clash_${{ env.VERSION }}_amd64.rpm) | [ARM64](${{ env.DOWNLOAD_URL }}/LIebesu_Clash_${{ env.VERSION }}_aarch64.rpm) | [ARMv7](${{ env.DOWNLOAD_URL }}/LIebesu_Clash_${{ env.VERSION }}_armhfp.rpm)

          ### FAQ
          - [Â∏∏ËßÅÈóÆÈ¢ò](https://clash-verge-rev.github.io/faq/windows.html)

          ### üêû ‰øÆÂ§çÈóÆÈ¢ò
          - ‚úÖ ‰øÆÂ§çÂÖ®Â±ÄËäÇÁÇπÊµãÈÄüÂäüËÉΩ (ÊâπÈáèÂπ∂Âèë + ÂºÇÊ≠•ÂÆâÂÖ®)
          - ‚úÖ Â¢ûÂº∫ËøõÂ∫¶Êù°UIÊòæÁ§∫ÂíåÈ¢úËâ≤Ê†áÊ≥®Á≥ªÁªü
          - ‚úÖ ‰øÆÂ§ç macOS DMG ÂÆâË£ÖÂêé Launchpad ÂõæÊ†áÊòæÁ§∫
          - ‚úÖ Ê∑ªÂä†ÊúçÂä°ÂêØÂä®ÂÅúÊ≠¢ÊéßÂà∂ÊåâÈíÆ
          - ‚úÖ ÂÆåÂñÑÈîôËØØÂ§ÑÁêÜÂíåË∂ÖÊó∂‰øùÊä§Êú∫Âà∂
          - ‚úÖ ‰ºòÂåñÂâçÁ´ØÊûÑÂª∫ÂÜÖÂ≠òÈÖçÁΩÆ (4GB‚Üí8GB)
          - ‚ö†Ô∏è ÊöÇ‰∏çÊîØÊåÅ Linux ÁâàÊú¨

          Created at ${{ env.BUILDTIME }}.
          EOF

      - name: Upload Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG_NAME }}
          name: "LIebesu_Clash ${{ env.TAG_CHANNEL }}"
          body_path: release.txt
          prerelease: true
          token: ${{ secrets.GITHUB_TOKEN }}
          generate_release_notes: true

  clean_old_assets:
    name: Clean Old Release Assets
    needs: [check_commit, update_tag]
    if: ${{ needs.check_commit.outputs.should_run == 'true' && needs.update_tag.result == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Clean old assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Cleaning old release assets for autobuild tag"
          # Get release by tag
          RELEASE_ID=$(gh api repos/${{ github.repository }}/releases/tags/autobuild --jq '.id' 2>/dev/null || echo "")
          if [ -n "$RELEASE_ID" ]; then
            # Get assets older than 7 days
            gh api repos/${{ github.repository }}/releases/$RELEASE_ID/assets --jq '.[] | select(.created_at < (now - 7*24*3600 | strftime("%Y-%m-%dT%H:%M:%SZ"))) | .id' | while read asset_id; do
              if [ -n "$asset_id" ]; then
                echo "Deleting asset $asset_id"
                gh api --method DELETE repos/${{ github.repository }}/releases/assets/$asset_id || true
              fi
            done
          fi

  autobuild-x86-windows-macos-linux:
    name: Autobuild Windows and MacOS (Optimized)
    needs: [check_commit, update_tag]
    if: ${{ needs.check_commit.outputs.should_run == 'true' }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Âè™‰øùÁïôÊúÄÂ∏∏Áî®ÁöÑÊûÑÂª∫ÁõÆÊ†á
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            arch: x64
          - os: macos-latest
            target: aarch64-apple-darwin
            arch: arm64
          - os: macos-latest
            target: x86_64-apple-darwin
            arch: x64
          # ÁßªÈô§‰∏çÂ∏∏Áî®ÁöÑ ARM Windows
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Rust Stable
        uses: dtolnay/rust-toolchain@stable
        continue-on-error: true
        id: rust_install_1
        
      - name: Retry Install Rust Stable (attempt 2)
        if: steps.rust_install_1.outcome == 'failure'
        uses: dtolnay/rust-toolchain@stable
        continue-on-error: true
        id: rust_install_2
        
      - name: Add Rust Target
        run: rustup target add ${{ matrix.target }}
        continue-on-error: true
        id: rust_target_1
        
      - name: Retry Add Rust Target (attempt 2)
        if: steps.rust_target_1.outcome == 'failure'
        run: rustup target add ${{ matrix.target }}
        continue-on-error: true
        id: rust_target_2
        

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: src-tauri
          cache-all-crates: true
          save-if: ${{ github.ref == 'refs/heads/main' }}  # ‰øÆÂ§çÔºöÂú®mainÂàÜÊîØ‰øùÂ≠òÁºìÂ≠ò
          shared-key: autobuild-optimized

      # Linux ÊûÑÂª∫Â∑≤Á¶ÅÁî®
      # - name: Install dependencies (ubuntu only)
      #   if: matrix.os == 'ubuntu-22.04'
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install -y libxslt1.1 libwebkit2gtk-4.1-dev libayatana-appindicator3-dev librsvg2-dev patchelf

      - name: Install x86 OpenSSL (macOS only)
        if: matrix.target == 'x86_64-apple-darwin'
        run: |
          arch -x86_64 brew install openssl@3
          echo "OPENSSL_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=$(brew --prefix openssl@3)/include" >> $GITHUB_ENV
          echo "OPENSSL_LIB_DIR=$(brew --prefix openssl@3)/lib" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=$(brew --prefix openssl@3)/lib/pkgconfig" >> $GITHUB_ENV

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false

      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "pnpm"

      - name: Pnpm install and check
        run: |
          # ‰ΩøÁî®frozen-lockfileÊèêÈ´òÂÆâË£ÖÈÄüÂ∫¶
          pnpm i --frozen-lockfile
          pnpm run prebuild ${{ matrix.target }}

      - name: Release ${{ env.TAG_CHANNEL }} Version
        run: pnpm release-version autobuild-latest

      - name: Create or update release
        if: matrix.os == 'windows-latest' && matrix.target == 'x86_64-pc-windows-msvc'
        shell: bash  # ÊòéÁ°ÆÊåáÂÆö‰ΩøÁî®bash shell
        run: |
          # Âè™Âú®Á¨¨‰∏Ä‰∏™‰Ωú‰∏ö‰∏≠ÂàõÂª∫GitHub Release
          if gh release view ${{ env.TAG_NAME }} >/dev/null 2>&1; then
            echo "Release ${{ env.TAG_NAME }} already exists"
            # Âà†Èô§Â∑≤Â≠òÂú®ÁöÑrelease‰ª•ÈÅøÂÖçÂÜ≤Á™Å
            gh release delete ${{ env.TAG_NAME }} --yes || true
            sleep 5  # Á≠âÂæÖÂà†Èô§ÂÆåÊàê
          fi
          # ÂàõÂª∫Êñ∞ÁöÑrelease
          gh release create ${{ env.TAG_NAME }} \
            --title "LIebesu_Clash ${{ env.TAG_CHANNEL }}" \
            --notes "More new features are now supported." \
            --prerelease
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Tauri build for Windows-macOS-Linux
        uses: tauri-apps/tauri-action@v0
        env:
          NODE_OPTIONS: "--max_old_space_size=8192"  # ‰ºòÂåñÔºöÂ§ßÂπÖÂ¢ûÂä†ÂÜÖÂ≠òÈôêÂà∂
          # ÁßªÈô§GITHUB_TOKENÔºåÁ¶ÅÁî®ÊâÄÊúâGitHubÁõ∏ÂÖ≥Êìç‰Ωú
          # GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # ‰ΩøÁî® ad-hoc Á≠æÂêçÔºåÈÅøÂÖçËØÅ‰π¶ÂØºÂÖ•
          APPLE_SIGNING_IDENTITY: "-"
          VITE_BUILD_VERSION: "${{ github.run_number }}"
        with:
          # ÂÆåÂÖ®ÁßªÈô§releaseÁõ∏ÂÖ≥ÈÖçÁΩÆÔºåÂè™ËøõË°åÊûÑÂª∫
          # tagName: ${{ env.TAG_NAME }}
          # releaseName: "LIebesu_Clash ${{ env.TAG_CHANNEL }}"
          # releaseBody: "More new features are now supported."
          # releaseDraft: false
          # prerelease: true
          tauriScript: pnpm
          args: --target ${{ matrix.target }}
          # includeUpdaterJson: true

      - name: Enhanced macOS Post-Build Processing
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          set -e
          echo "üçé ÂºÄÂßãÂ¢ûÂº∫ÁöÑ macOS ÂêéÂ§ÑÁêÜ..."
          
          # Êü•ÊâæÊûÑÂª∫ÁöÑÂ∫îÁî®Á®ãÂ∫èÂíåDMG
          APP_PATH=$(find src-tauri/target -type d -path "*/release/bundle/*/*.app" | head -1)
          DMG_PATH=$(find src-tauri/target -type f -path "*/release/bundle/dmg/*.dmg" | head -1)
          
          echo "Â∫îÁî®Á®ãÂ∫èË∑ØÂæÑ: $APP_PATH"
          echo "DMGË∑ØÂæÑ: $DMG_PATH"
          
          if [[ -n "$APP_PATH" ]]; then
            echo "üîß Â§ÑÁêÜÂ∫îÁî®Á®ãÂ∫èÂåÖ..."
            
            # 1. ÁßªÈô§ÊâÄÊúâÊâ©Â±ïÂ±ûÊÄß
            echo "ÁßªÈô§Êâ©Â±ïÂ±ûÊÄß..."
            sudo xattr -cr "$APP_PATH" || xattr -cr "$APP_PATH" || true
            
            # 2. ËÆæÁΩÆÊ≠£Á°ÆÁöÑÊùÉÈôê
            echo "ËÆæÁΩÆÊùÉÈôê..."
            chmod -R 755 "$APP_PATH"
            chmod +x "$APP_PATH/Contents/MacOS/"* 2>/dev/null || true
            
            # 3. Ê£ÄÊü•Âíå‰øÆÂ§çInfo.plist
            INFO_PLIST="$APP_PATH/Contents/Info.plist"
            if [[ -f "$INFO_PLIST" ]]; then
              echo "Ê£ÄÊü•Info.plist..."
              # Á°Æ‰øùCFBundleExecutableÊ≠£Á°Æ
              BUNDLE_EXEC=$(plutil -extract CFBundleExecutable raw "$INFO_PLIST" 2>/dev/null || echo "")
              if [[ -z "$BUNDLE_EXEC" ]]; then
                plutil -replace CFBundleExecutable -string "LIebesu_Clash" "$INFO_PLIST" || true
              fi
              # ËÆæÁΩÆÂÖ∂‰ªñÂøÖË¶ÅÂ±ûÊÄß
              plutil -replace LSMinimumSystemVersion -string "10.15" "$INFO_PLIST" || true
              plutil -replace NSHighResolutionCapable -bool true "$INFO_PLIST" || true
            fi
            
            # 4. ÈáçÊñ∞Á≠æÂêç
            echo "ÈáçÊñ∞Á≠æÂêçÂ∫îÁî®Á®ãÂ∫è..."
            codesign --force --deep --sign - "$APP_PATH" || true
            
            # 5. È™åËØÅÁ≠æÂêç
            echo "È™åËØÅÁ≠æÂêç..."
            codesign --verify --verbose=2 "$APP_PATH" || echo "‚ö†Ô∏è Á≠æÂêçÈ™åËØÅÂ§±Ë¥•"
            
            # 6. Ê≥®ÂÜåÂà∞Launch Services
            echo "Ê≥®ÂÜåÂà∞Launch Services..."
            /System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -f "$APP_PATH" || true
            
            # 7. ÂàõÂª∫‰øÆÂ§çËÑöÊú¨
            echo "ÂàõÂª∫‰øÆÂ§çËÑöÊú¨..."
            cat > "$(dirname "$APP_PATH")/fix-startup.sh" << 'EOF'
          #!/bin/bash
          echo "üîß LIebesu_Clash ÂêØÂä®‰øÆÂ§ç"
          APP_PATH="/Applications/LIebesu_Clash.app"
          [[ ! -d "$APP_PATH" ]] && APP_PATH="$PWD/LIebesu_Clash.app"
          
          if [[ -d "$APP_PATH" ]]; then
            echo "ÁßªÈô§ÈöîÁ¶ªÂ±ûÊÄß..."
            sudo xattr -cr "$APP_PATH" 2>/dev/null || xattr -cr "$APP_PATH"
            echo "ÈáçÊñ∞Á≠æÂêç..."
            codesign --force --deep --sign - "$APP_PATH"
            echo "Ê≥®ÂÜåÂ∫îÁî®..."
            /System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -f "$APP_PATH"
            echo "Âà∑Êñ∞Dock..."
            killall Dock 2>/dev/null || true
            echo "‚úÖ ‰øÆÂ§çÂÆåÊàêÔºÅ"
            open "$APP_PATH"
          else
            echo "‚ùå Êú™ÊâæÂà∞Â∫îÁî®Á®ãÂ∫è"
          fi
          EOF
            chmod +x "$(dirname "$APP_PATH")/fix-startup.sh"
            
            # 8. Êõ¥Êñ∞Êó∂Èó¥Êà≥
            touch "$APP_PATH"
            
            echo "‚úÖ Â∫îÁî®Á®ãÂ∫èÂ§ÑÁêÜÂÆåÊàê"
          fi
          
          if [[ -n "$DMG_PATH" ]]; then
            echo "üîß Â§ÑÁêÜDMGÊñá‰ª∂..."
            # ÁßªÈô§DMGÈöîÁ¶ªÂ±ûÊÄß
            sudo xattr -cr "$DMG_PATH" || xattr -cr "$DMG_PATH" || true
            
            # Â§çÂà∂‰øÆÂ§çËÑöÊú¨
            if [[ -f "$(dirname "$APP_PATH")/fix-startup.sh" ]]; then
              cp "$(dirname "$APP_PATH")/fix-startup.sh" "$(dirname "$DMG_PATH")/"
            fi
            
            # Â§çÂà∂Â¢ûÂº∫‰øÆÂ§çËÑöÊú¨
            if [[ -f "scripts/enhanced-macos-fix.sh" ]]; then
              cp "scripts/enhanced-macos-fix.sh" "$(dirname "$DMG_PATH")/"
            fi
            
            echo "‚úÖ DMGÂ§ÑÁêÜÂÆåÊàê"
          fi
          
          echo "üéâ Â¢ûÂº∫ÁöÑmacOSÂêéÂ§ÑÁêÜÂÆåÊàêÔºÅ"

      - name: Rename Windows EXE with run number
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          $files = Get-ChildItem ".\src-tauri\target\${{ matrix.target }}\release\bundle\nsis\*-setup.exe"
          foreach ($file in $files) {
            $dir = $file.Directory
            $baseName = $file.BaseName -replace "-setup$", ""
            $newName = "${baseName}_${{ github.run_number }}-setup.exe"
            $newPath = Join-Path $dir $newName
            Rename-Item $file.FullName $newPath
            Write-Output "Renamed to: $newPath"
          }
          
          $files = Get-ChildItem ".\src-tauri\target\${{ matrix.target }}\release\bundle\nsis\*.nsis.zip"
          foreach ($file in $files) {
            $dir = $file.Directory
            $baseName = $file.BaseName -replace "-setup\.nsis$", ""
            $newName = "${baseName}_${{ github.run_number }}-setup.nsis.zip"
            $newPath = Join-Path $dir $newName
            Rename-Item $file.FullName $newPath
            Write-Output "Renamed to: $newPath"
          }

      - name: Rename macOS DMG and APP with run number
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          set -e
          # ÈáçÂëΩÂêç DMG Êñá‰ª∂
          DMG_PATH=$(find src-tauri/target -type f -path "*/release/bundle/dmg/*.dmg" | head -1)
          if [[ -n "$DMG_PATH" ]]; then
            DIR=$(dirname "$DMG_PATH")
            FILE=$(basename "$DMG_PATH")
            EXT="${FILE##*.}"
            NAME="${FILE%.*}"
            NEW_NAME="${NAME}_${GITHUB_RUN_NUMBER}.${EXT}"
            mv "$DMG_PATH" "$DIR/$NEW_NAME"
            echo "Renamed DMG to: $DIR/$NEW_NAME"
          fi
          
          # ÈáçÂëΩÂêç APP.tar.gz Êñá‰ª∂
          APP_PATH=$(find src-tauri/target -type f -path "*/release/bundle/macos/*.app.tar.gz" | head -1)
          if [[ -n "$APP_PATH" ]]; then
            DIR=$(dirname "$APP_PATH")
            FILE=$(basename "$APP_PATH")
            NAME="${FILE%.app.tar.gz}"
            NEW_NAME="${NAME}_${GITHUB_RUN_NUMBER}.app.tar.gz"
            mv "$APP_PATH" "$DIR/$NEW_NAME"
            echo "Renamed APP to: $DIR/$NEW_NAME"
          fi

      - name: Upload renamed assets to release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG_NAME }}
          name: "LIebesu_Clash ${{ env.TAG_CHANNEL }}"
          prerelease: true
          token: ${{ secrets.GITHUB_TOKEN }}
          files: |
            src-tauri/target/${{ matrix.target }}/release/bundle/nsis/*_${{ github.run_number }}-setup.exe
            src-tauri/target/${{ matrix.target }}/release/bundle/nsis/*_${{ github.run_number }}-setup.nsis.zip
            src-tauri/target/${{ matrix.target }}/release/bundle/dmg/*_${{ github.run_number }}.dmg
            src-tauri/target/${{ matrix.target }}/release/bundle/macos/*_${{ github.run_number }}.app.tar.gz

  # Linux ARM ÊûÑÂª∫Â∑≤Á¶ÅÁî®
  autobuild-arm-linux:
    name: Autobuild ARM Linux
    needs: [check_commit, update_tag]
    if: ${{ false }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            target: aarch64-unknown-linux-gnu
            arch: arm64
          - os: ubuntu-22.04
            target: armv7-unknown-linux-gnueabihf
            arch: armhf
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Rust Stable
        uses: dtolnay/rust-toolchain@stable
        continue-on-error: true
        id: rust_install_1
        
      - name: Retry Install Rust Stable (attempt 2)
        if: steps.rust_install_1.outcome == 'failure'
        uses: dtolnay/rust-toolchain@stable
        continue-on-error: true
        id: rust_install_2
        
      - name: Add Rust Target
        run: rustup target add ${{ matrix.target }}
        continue-on-error: true
        id: rust_target_1
        
      - name: Retry Add Rust Target (attempt 2)
        if: steps.rust_target_1.outcome == 'failure'
        run: rustup target add ${{ matrix.target }}
        continue-on-error: true
        id: rust_target_2
        

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: src-tauri
          cache-all-crates: true
          save-if: ${{ github.ref == 'refs/heads/main' }}  # ‰øÆÂ§çÔºöÂú®mainÂàÜÊîØ‰øùÂ≠òÁºìÂ≠ò
          shared-key: autobuild-optimized

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "pnpm"

      - name: Pnpm install and check
        run: |
          # ‰ΩøÁî®frozen-lockfileÊèêÈ´òÂÆâË£ÖÈÄüÂ∫¶
          pnpm i --frozen-lockfile
          pnpm run prebuild ${{ matrix.target }}

      - name: Release ${{ env.TAG_CHANNEL }} Version
        run: pnpm release-version autobuild-latest

      - name: Setup for linux
        run: |
          sudo ls -lR /etc/apt/

          cat > /tmp/sources.list << EOF
          deb [arch=amd64,i386] http://archive.ubuntu.com/ubuntu jammy main multiverse universe restricted
          deb [arch=amd64,i386] http://archive.ubuntu.com/ubuntu jammy-security main multiverse universe restricted
          deb [arch=amd64,i386] http://archive.ubuntu.com/ubuntu jammy-updates main multiverse universe restricted
          deb [arch=amd64,i386] http://archive.ubuntu.com/ubuntu jammy-backports main multiverse universe restricted

          deb [arch=armhf,arm64] http://ports.ubuntu.com/ubuntu-ports jammy main multiverse universe restricted
          deb [arch=armhf,arm64] http://ports.ubuntu.com/ubuntu-ports jammy-security main multiverse universe restricted
          deb [arch=armhf,arm64] http://ports.ubuntu.com/ubuntu-ports jammy-updates main multiverse universe restricted
          deb [arch=armhf,arm64] http://ports.ubuntu.com/ubuntu-ports jammy-backports main multiverse universe restricted
          EOF

          sudo mv /etc/apt/sources.list /etc/apt/sources.list.default
          sudo mv /tmp/sources.list /etc/apt/sources.list

          sudo dpkg --add-architecture ${{ matrix.arch }}
          sudo apt-get update -y
          sudo apt-get -f install -y

          sudo apt-get install -y \
            linux-libc-dev:${{ matrix.arch }} \
            libc6-dev:${{ matrix.arch }}

          sudo apt-get install -y \
            libxslt1.1:${{ matrix.arch }} \
            libwebkit2gtk-4.1-dev:${{ matrix.arch }} \
            libayatana-appindicator3-dev:${{ matrix.arch }} \
            libssl-dev:${{ matrix.arch }} \
            patchelf:${{ matrix.arch }} \
            librsvg2-dev:${{ matrix.arch }}

      - name: Install aarch64 tools
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt install -y \
            gcc-aarch64-linux-gnu \
            g++-aarch64-linux-gnu

      - name: Install armv7 tools
        if: matrix.target == 'armv7-unknown-linux-gnueabihf'
        run: |
          sudo apt install -y \
            gcc-arm-linux-gnueabihf \
            g++-arm-linux-gnueabihf

      - name: Tauri Build for Linux
        run: |
          export PKG_CONFIG_ALLOW_CROSS=1
          if [ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]; then
            export PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig/:$PKG_CONFIG_PATH
            export PKG_CONFIG_SYSROOT_DIR=/usr/aarch64-linux-gnu/
          elif [ "${{ matrix.target }}" == "armv7-unknown-linux-gnueabihf" ]; then
            export PKG_CONFIG_PATH=/usr/lib/arm-linux-gnueabihf/pkgconfig/:$PKG_CONFIG_PATH
            export PKG_CONFIG_SYSROOT_DIR=/usr/arm-linux-gnueabihf/
          fi
          pnpm build --target ${{ matrix.target }}
        env:
          NODE_OPTIONS: "--max_old_space_size=8192"  # ‰ºòÂåñÔºöÂ§ßÂπÖÂ¢ûÂä†ÂÜÖÂ≠òÈôêÂà∂
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}

      - name: Get Version
        run: |
          sudo apt-get update
          sudo apt-get install jq
          echo "VERSION=$(cat package.json | jq '.version' | tr -d '"')" >> $GITHUB_ENV
          echo "BUILDTIME=$(TZ=Asia/Shanghai date)" >> $GITHUB_ENV

      - name: Upload Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG_NAME }}
          name: "LIebesu_Clash ${{ env.TAG_CHANNEL }}"
          prerelease: true
          token: ${{ secrets.GITHUB_TOKEN }}
          files: |
            src-tauri/target/${{ matrix.target }}/release/bundle/deb/*.deb
            src-tauri/target/${{ matrix.target }}/release/bundle/rpm/*.rpm

  autobuild-x86-arm-windows_webview2:
    name: Autobuild Windows x64 with WebView2 (Optimized)
    needs: [check_commit, update_tag]
    if: ${{ needs.check_commit.outputs.should_run == 'true' }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Âè™‰øùÁïôÊúÄÂ∏∏Áî®ÁöÑx64ÁâàÊú¨
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            arch: x64
          # ÁßªÈô§ARM64ÁâàÊú¨‰ª•ËäÇÁúÅÊûÑÂª∫Êó∂Èó¥
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Add Rust Target
        run: rustup target add ${{ matrix.target }}
        continue-on-error: true
        id: rust_target_1
        
      - name: Retry Add Rust Target (attempt 2)
        if: steps.rust_target_1.outcome == 'failure'
        run: rustup target add ${{ matrix.target }}
        continue-on-error: true
        id: rust_target_2
        

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: src-tauri
          cache-all-crates: true
          save-if: ${{ github.ref == 'refs/heads/main' }}  # ‰øÆÂ§çÔºöÂú®mainÂàÜÊîØ‰øùÂ≠òÁºìÂ≠ò
          shared-key: autobuild-optimized

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "pnpm"

      - name: Pnpm install and check
        run: |
          # ‰ΩøÁî®frozen-lockfileÊèêÈ´òÂÆâË£ÖÈÄüÂ∫¶
          pnpm i --frozen-lockfile
          pnpm run prebuild ${{ matrix.target }}

      - name: Release ${{ env.TAG_CHANNEL }} Version
        run: pnpm release-version autobuild-latest

      - name: Download WebView2 Runtime
        run: |
          invoke-webrequest -uri https://github.com/westinyang/WebView2RuntimeArchive/releases/download/109.0.1518.78/Microsoft.WebView2.FixedVersionRuntime.109.0.1518.78.${{ matrix.arch }}.cab -outfile Microsoft.WebView2.FixedVersionRuntime.109.0.1518.78.${{ matrix.arch }}.cab
          Expand .\Microsoft.WebView2.FixedVersionRuntime.109.0.1518.78.${{ matrix.arch }}.cab -F:* ./src-tauri
          Remove-Item .\src-tauri\tauri.windows.conf.json
          Rename-Item .\src-tauri\webview2.${{ matrix.arch }}.json tauri.windows.conf.json

      - name: Tauri build for Windows
        id: build
        uses: tauri-apps/tauri-action@v0
        env:
          NODE_OPTIONS: "--max_old_space_size=8192"  # ‰ºòÂåñÔºöÂ§ßÂπÖÂ¢ûÂä†ÂÜÖÂ≠òÈôêÂà∂
          # ÁßªÈô§GITHUB_TOKENÔºåÁ¶ÅÁî®GitHubÁõ∏ÂÖ≥Êìç‰Ωú
          # GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          tauriScript: pnpm
          args: --target ${{ matrix.target }}
          # includeUpdaterJson: true

      - name: Rename
        run: |
          $files = Get-ChildItem ".\src-tauri\target\${{ matrix.target }}\release\bundle\nsis\*-setup.exe"
          foreach ($file in $files) {
            $newName = $file.Name -replace "-setup\.exe$", "_${{ github.run_number }}_fixed_webview2-setup.exe"
            Rename-Item $file.FullName $newName
          }

          $files = Get-ChildItem ".\src-tauri\target\${{ matrix.target }}\release\bundle\nsis\*.nsis.zip"
          foreach ($file in $files) {
            $newName = $file.Name -replace "-setup\.nsis\.zip$", "_${{ github.run_number }}_fixed_webview2-setup.nsis.zip"
            Rename-Item $file.FullName $newName
          }

          $files = Get-ChildItem ".\src-tauri\target\${{ matrix.target }}\release\bundle\nsis\*-setup.exe.sig"
          foreach ($file in $files) {
            $newName = $file.Name -replace "-setup\.exe\.sig$", "_${{ github.run_number }}_fixed_webview2-setup.exe.sig"
            Rename-Item $file.FullName $newName
          }

      - name: Upload Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG_NAME }}
          name: "LIebesu_Clash ${{ env.TAG_CHANNEL }}"
          prerelease: true
          token: ${{ secrets.GITHUB_TOKEN }}
          files: src-tauri/target/${{ matrix.target }}/release/bundle/nsis/*setup*

      - name: Portable Bundle
        run: pnpm portable-fixed-webview2 ${{ matrix.target }} --${{ env.TAG_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify-telegram:
    name: Notify Telegram
    runs-on: ubuntu-latest
    needs:
      [
        update_tag,
        autobuild-x86-windows-macos-linux,
        autobuild-x86-arm-windows_webview2,
      ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Fetch UPDATE logs
        id: fetch_update_logs
        run: |
          if [ -f "UPDATELOG.md" ]; then
            UPDATE_LOGS=$(awk '/^## v/{if(flag) exit; flag=1} flag' UPDATELOG.md)
            if [ -n "$UPDATE_LOGS" ]; then
              echo "Found update logs"
              echo "UPDATE_LOGS<<EOF" >> $GITHUB_ENV
              echo "$UPDATE_LOGS" >> $GITHUB_ENV
              echo "EOF" >> $GITHUB_ENV
            else
              echo "No update sections found in UPDATELOG.md"
            fi
          else
            echo "UPDATELOG.md file not found"
          fi
        shell: bash

      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Release AutoBuild Version
        run: pnpm release-version autobuild-latest

      - name: Get Version and Release Info
        run: |
          sudo apt-get update
          sudo apt-get install jq
          echo "VERSION=$(cat package.json | jq '.version' | tr -d '"')" >> $GITHUB_ENV
          echo "DOWNLOAD_URL=https://github.com/liebesu/LIebesu_Clash/releases/download/autobuild" >> $GITHUB_ENV
          echo "BUILDTIME=$(TZ=Asia/Shanghai date)" >> $GITHUB_ENV

      - name: Generate release.txt
        run: |
          if [ -z "$UPDATE_LOGS" ]; then
            echo "No update logs found, using default message"
            UPDATE_LOGS="More new features are now supported. Check for detailed changelog soon."
          else
            echo "Using found update logs"
          fi

          cat > release.txt << EOF
          $UPDATE_LOGS

          ## ‰∏ãËΩΩÂú∞ÂùÄ

          ### Windows (‰∏çÂÜçÊîØÊåÅWin7)
          #### Ê≠£Â∏∏ÁâàÊú¨(Êé®Ëçê)
          - [64‰Ωç(Â∏∏Áî®)](${{ env.DOWNLOAD_URL }}/LIebesu_Clash_${{ env.VERSION }}_x64-setup.exe) | [ARM64(‰∏çÂ∏∏Áî®)](${{ env.DOWNLOAD_URL }}/LIebesu_Clash_${{ env.VERSION }}_arm64-setup.exe)

          #### ÂÜÖÁΩÆWebview2Áâà(‰ΩìÁßØËæÉÂ§ßÔºå‰ªÖÂú®‰ºÅ‰∏öÁâàÁ≥ªÁªüÊàñÊó†Ê≥ïÂÆâË£Öwebview2Êó∂‰ΩøÁî®)
          - [64‰Ωç](${{ env.DOWNLOAD_URL }}/LIebesu_Clash_${{ env.VERSION }}_x64_fixed_webview2-setup.exe) | [ARM64](${{ env.DOWNLOAD_URL }}/LIebesu_Clash_${{ env.VERSION }}_arm64_fixed_webview2-setup.exe)

          ### macOS
          - [Apple MËäØÁâá(Êé®Ëçê)](${{ env.DOWNLOAD_URL }}/LIebesu_Clash_${{ env.VERSION }}_aarch64.dmg) | [IntelËäØÁâá](${{ env.DOWNLOAD_URL }}/LIebesu_Clash_${{ env.VERSION }}_x64.dmg)

          ### Linux
          #### DEBÂåÖ(DebianÁ≥ª) ‰ΩøÁî® apt ./Ë∑ØÂæÑ ÂÆâË£Ö
          - [64‰Ωç](${{ env.DOWNLOAD_URL }}/LIebesu_Clash_${{ env.VERSION }}_amd64.deb) | [ARM64](${{ env.DOWNLOAD_URL }}/LIebesu_Clash_${{ env.VERSION }}_arm64.deb) | [ARMv7](${{ env.DOWNLOAD_URL }}/LIebesu_Clash_${{ env.VERSION }}_armhf.deb)

          #### RPMÂåÖ(RedhatÁ≥ª) ‰ΩøÁî® dnf ./Ë∑ØÂæÑ ÂÆâË£Ö
          - [64‰Ωç](${{ env.DOWNLOAD_URL }}/LIebesu_Clash_${{ env.VERSION }}_amd64.rpm) | [ARM64](${{ env.DOWNLOAD_URL }}/LIebesu_Clash_${{ env.VERSION }}_aarch64.rpm) | [ARMv7](${{ env.DOWNLOAD_URL }}/LIebesu_Clash_${{ env.VERSION }}_armhfp.rpm)

          ### FAQ
          - [Â∏∏ËßÅÈóÆÈ¢ò](https://clash-verge-rev.github.io/faq/windows.html)

          ### üêû ‰øÆÂ§çÈóÆÈ¢ò
          - ‚úÖ ‰øÆÂ§çÂÖ®Â±ÄËäÇÁÇπÊµãÈÄüÂäüËÉΩ (ÊâπÈáèÂπ∂Âèë + ÂºÇÊ≠•ÂÆâÂÖ®)
          - ‚úÖ Â¢ûÂº∫ËøõÂ∫¶Êù°UIÊòæÁ§∫ÂíåÈ¢úËâ≤Ê†áÊ≥®Á≥ªÁªü
          - ‚úÖ ‰øÆÂ§ç macOS DMG ÂÆâË£ÖÂêé Launchpad ÂõæÊ†áÊòæÁ§∫
          - ‚úÖ Ê∑ªÂä†ÊúçÂä°ÂêØÂä®ÂÅúÊ≠¢ÊéßÂà∂ÊåâÈíÆ
          - ‚úÖ ÂÆåÂñÑÈîôËØØÂ§ÑÁêÜÂíåË∂ÖÊó∂‰øùÊä§Êú∫Âà∂
          - ‚úÖ ‰ºòÂåñÂâçÁ´ØÊûÑÂª∫ÂÜÖÂ≠òÈÖçÁΩÆ (4GB‚Üí8GB)
          - ‚ö†Ô∏è ÊöÇ‰∏çÊîØÊåÅ Linux ÁâàÊú¨

          Created at ${{ env.BUILDTIME }}.
          EOF

      - name: Setup GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y gh
          
      - name: Debug Release Info
        run: |
          echo "=== Ë∞ÉËØï‰ø°ÊÅØ ==="
          echo "TAG_NAME: $TAG_NAME"
          echo "VERSION: $VERSION"
          echo "DOWNLOAD_URL: $DOWNLOAD_URL"
          echo ""
          echo "=== Ê£ÄÊü• GitHub Release ==="
          gh release view $TAG_NAME --repo liebesu/LIebesu_Clash || echo "Release ‰∏çÂ≠òÂú®"
          echo ""
          echo "=== Ëé∑Âèñ Assets ÂàóË°® ==="
          gh api repos/liebesu/LIebesu_Clash/releases/tags/$TAG_NAME --jq '.assets[] | .name' || echo "Êó†Ê≥ïËé∑Âèñ assets"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG_NAME: ${{ env.TAG_NAME }}
          VERSION: ${{ env.VERSION }}
          DOWNLOAD_URL: ${{ env.DOWNLOAD_URL }}

      - name: Send Telegram Notification
        run: node scripts/telegram.mjs
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BUILD_TYPE: autobuild
          VERSION: ${{ env.VERSION }}
          DOWNLOAD_URL: ${{ env.DOWNLOAD_URL }}
          TAG_NAME: ${{ env.TAG_NAME }}
