name: Windows 个人构建

on:
  workflow_dispatch:
  push:
    branches: [dev]
    paths:
      - "src/**"
      - "src-tauri/**"
      - ".github/workflows/**"
      - "package.json"
      - "pnpm-lock.yaml"
      - "vite.config.mts"
      - "tsconfig.json"

permissions: write-all

env:
  CARGO_INCREMENTAL: 0
  RUST_BACKTRACE: short

concurrency:
  group: "windows-personal-${{ github.ref }}"
  cancel-in-progress: true

jobs:
  build-windows-x64:
    name: Build Windows (x64)
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: pnpm

      - name: Install frontend deps
        run: pnpm install --frozen-lockfile

      - name: Download sidecar binaries (x64) with validation
        shell: pwsh
        run: |
          Write-Host "Starting prebuild for x86_64-pc-windows-msvc..." -ForegroundColor Green

          try {
            pnpm run prebuild x86_64-pc-windows-msvc
            Write-Host "Prebuild completed successfully" -ForegroundColor Green
          } catch {
            Write-Host "Prebuild failed: $($_.Exception.Message)" -ForegroundColor Red
            throw
          }

          # Verify critical sidecar files exist
          Write-Host "Verifying critical sidecar files..." -ForegroundColor Yellow
          $criticalFiles = @(
            "src-tauri/sidecar/verge-mihomo-x86_64-pc-windows-msvc.exe",
            "src-tauri/sidecar/verge-mihomo-alpha-x86_64-pc-windows-msvc.exe"
          )

          foreach ($file in $criticalFiles) {
            if (Test-Path $file) {
              $size = (Get-ItemProperty $file).Length / 1MB
              Write-Host "[OK] $file ($([math]::Round($size, 1)) MB)" -ForegroundColor Green
            } else {
              Write-Host "[ERROR] Missing critical file: $file" -ForegroundColor Red
              throw "Critical sidecar binary missing: $file"
            }
          }

          # Verify Windows-specific files
          $windowsFiles = @(
            "src-tauri/resources/sysproxy.exe",
            "src-tauri/resources/clash-verge-service.exe",
            "src-tauri/resources/enableLoopback.exe"
          )

          foreach ($file in $windowsFiles) {
            if (Test-Path $file) {
              Write-Host "[OK] Windows file: $file" -ForegroundColor Green
            } else {
              Write-Host "[WARN] Missing Windows file: $file" -ForegroundColor Yellow
            }
          }

      - name: Create Tauri config override (disable updater)
        shell: pwsh
        run: |
          $config = @'
          {
            "$schema": "../node_modules/@tauri-apps/cli/config.schema.json",
            "identifier": "io.github.liebesu.clash",
            "productName": "Liebesu_Clash",
            "plugins": {
              "updater": {
                "active": false
              },
              "deep-link": {
                "desktop": {
                  "schemes": ["liebesu-clash"]
                }
              }
            },
            "bundle": {
              "windows": {
                "nsis": {}
              },
              "macOS": {
                "signingIdentity": "-",
                "entitlements": "packages/macos/entitlements.plist"
              }
            }
          }
          '@
          $config | Out-File -FilePath "src-tauri/tauri.personal.conf.json" -Encoding UTF8

      - name: Build app (x64 NSIS)
        uses: tauri-apps/tauri-action@v0.5
        env:
          NODE_OPTIONS: "--max_old_space_size=4096"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RUST_LOG: tauri=debug
        with:
          tauriScript: pnpm
          args: --target x86_64-pc-windows-msvc -b nsis --config src-tauri/tauri.personal.conf.json

      - name: Verify build artifacts and list files
        shell: pwsh
        run: |
          Write-Host "Verifying build artifacts..." -ForegroundColor Yellow

          $targetDir = "src-tauri/target/x86_64-pc-windows-msvc/release/bundle"

          if (!(Test-Path $targetDir)) {
            throw "Target directory not found: $targetDir"
          }

          # Check NSIS installer files
          $nsisDir = "$targetDir/nsis"
          if (Test-Path $nsisDir) {
            $setupFiles = Get-ChildItem -Path $nsisDir -Filter "*setup*.exe"
            Write-Host "NSIS setup files found:" -ForegroundColor Green
            foreach ($file in $setupFiles) {
              $sizeMB = [math]::Round($file.Length / 1MB, 1)
              Write-Host "  - $($file.Name) ($sizeMB MB)" -ForegroundColor Green
              
              # Check file size is reasonable (at least 20MB for a complete app)
              if ($file.Length -lt 20MB) {
                Write-Host "    [WARN] File size seems small for complete application" -ForegroundColor Yellow
              } else {
                Write-Host "    [OK] File size looks reasonable" -ForegroundColor Green
              }
            }
            
            if ($setupFiles.Count -eq 0) {
              throw "No setup executables found in NSIS directory"
            }
          } else {
            throw "NSIS directory not found: $nsisDir"
          }

          # List all build artifacts for debugging
          Write-Host "`nAll build artifacts:" -ForegroundColor Cyan
          Get-ChildItem -Path "src-tauri/target/" -Recurse -Include "*.exe", "*.msi" | ForEach-Object {
            $sizeMB = [math]::Round($_.Length / 1MB, 2)
            Write-Host "  $($_.FullName) ($sizeMB MB)" -ForegroundColor White
          }

          # Verify the main binary exists
          $mainBinary = "src-tauri/target/x86_64-pc-windows-msvc/release/liebesu-clash.exe"
          if (Test-Path $mainBinary) {
            $sizeMB = [math]::Round((Get-ItemProperty $mainBinary).Length / 1MB, 1)
            Write-Host "`n[OK] Main binary found: $mainBinary ($sizeMB MB)" -ForegroundColor Green
          } else {
            Write-Host "`n[WARN] Main binary not found at expected location: $mainBinary" -ForegroundColor Yellow
          }

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: clash-verge-windows-x64-${{ github.sha }}-${{ github.run_number }}
          path: |
            src-tauri/target/x86_64-pc-windows-msvc/release/bundle/nsis/*.exe
            src-tauri/target/x86_64-pc-windows-msvc/release/bundle/msi/*.msi
          if-no-files-found: warn
          retention-days: 7
