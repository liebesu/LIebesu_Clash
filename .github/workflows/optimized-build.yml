name: Optimized Build & Release

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'beta'
        type: choice
        options:
        - stable
        - beta
        - nightly
      auto_update:
        description: 'Enable auto-update mechanism'
        required: true
        default: true
        type: boolean
  push:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'src-tauri/**'
      - 'package.json'
      - 'pnpm-lock.yaml'
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  NODE_OPTIONS: "--max_old_space_size=8192"

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      build_number: ${{ steps.version.outputs.build_number }}
      release_name: ${{ steps.version.outputs.release_name }}
      should_release: ${{ steps.check.outputs.should_release }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate version info
        id: version
        run: |
          # 基础版本号从package.json读取
          BASE_VERSION=$(node -p "require('./package.json').version")
          BUILD_NUMBER="${{ github.run_number }}"
          
          # 根据release type生成版本号
          case "${{ github.event.inputs.release_type || 'beta' }}" in
            "stable")
              VERSION="${BASE_VERSION}"
              RELEASE_NAME="LIebesu Clash v${BASE_VERSION}"
              ;;
            "beta")
              VERSION="${BASE_VERSION}-beta.${BUILD_NUMBER}"
              RELEASE_NAME="LIebesu Clash v${BASE_VERSION} Beta ${BUILD_NUMBER}"
              ;;
            "nightly")
              VERSION="${BASE_VERSION}-nightly.${BUILD_NUMBER}"
              RELEASE_NAME="LIebesu Clash v${BASE_VERSION} Nightly ${BUILD_NUMBER}"
              ;;
          esac
          
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "build_number=${BUILD_NUMBER}" >> $GITHUB_OUTPUT
          echo "release_name=${RELEASE_NAME}" >> $GITHUB_OUTPUT
          
          echo "📦 Version: ${VERSION}"
          echo "🏗️ Build: ${BUILD_NUMBER}"
          echo "📋 Release: ${RELEASE_NAME}"

      - name: Check release conditions
        id: check
        run: |
          SHOULD_RELEASE="false"
          
          # 自动发布条件
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            SHOULD_RELEASE="true"
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]] && [[ "${{ github.event_name }}" == "push" ]]; then
            SHOULD_RELEASE="true"
          fi
          
          echo "should_release=${SHOULD_RELEASE}" >> $GITHUB_OUTPUT
          echo "🚀 Should Release: ${SHOULD_RELEASE}"

  build:
    needs: setup
    strategy:
      fail-fast: false
      matrix:
        include:
          # Apple Silicon macOS (优先)
          - name: "macOS Apple Silicon"
            os: macos-14
            target: aarch64-apple-darwin
            bundle: dmg
            platform: "macos-aarch64"
            file_ext: "dmg"
            
          # Windows x64
          - name: "Windows x64"
            os: windows-latest
            target: x86_64-pc-windows-msvc
            bundle: nsis
            platform: "windows-x64"
            file_ext: "exe"

    runs-on: ${{ matrix.os }}
    name: Build ${{ matrix.name }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"
          key: ${{ matrix.target }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install frontend dependencies
        run: pnpm install --frozen-lockfile

      - name: Prebuild (Target-specific setup)
        run: pnpm run prebuild ${{ matrix.target }}

      - name: Update version for auto-update
        if: ${{ github.event.inputs.auto_update == 'true' }}
        run: |
          # 更新Tauri配置中的版本号
          node -e "
            const fs = require('fs');
            const path = './src-tauri/tauri.conf.json';
            const config = JSON.parse(fs.readFileSync(path, 'utf8'));
            config.package.version = '${{ needs.setup.outputs.version }}';
            
            // 启用自动更新
            if (!config.plugins) config.plugins = {};
            if (!config.plugins.updater) config.plugins.updater = {};
            config.plugins.updater.active = true;
            config.plugins.updater.dialog = true;
            config.plugins.updater.endpoints = [
              'https://api.github.com/repos/${{ github.repository }}/releases/latest'
            ];
            
            fs.writeFileSync(path, JSON.stringify(config, null, 2));
            console.log('✅ 已更新版本和自动更新配置');
          "

      - name: macOS Code Signing Setup
        if: matrix.os == 'macos-14'
        run: |
          echo "🍎 设置 macOS 代码签名..."
          # 使用 ad-hoc 签名，避免证书配置
          echo "APPLE_SIGNING_IDENTITY=-" >> $GITHUB_ENV
          echo "ENABLE_CODE_SIGNING=false" >> $GITHUB_ENV

      - name: Build application
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_SIGNING_IDENTITY: ${{ env.APPLE_SIGNING_IDENTITY || '-' }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          VITE_BUILD_VERSION: ${{ needs.setup.outputs.build_number }}
          VITE_BUILD_TYPE: ${{ github.event.inputs.release_type || 'beta' }}
        with:
          tauriScript: pnpm
          args: --target ${{ matrix.target }} -b ${{ matrix.bundle }}
          # 只有在需要发布时才创建release
          tagName: ${{ needs.setup.outputs.should_release == 'true' && needs.setup.outputs.version || '' }}
          releaseName: ${{ needs.setup.outputs.should_release == 'true' && needs.setup.outputs.release_name || '' }}
          releaseBody: |
            ## 🚀 ${{ needs.setup.outputs.release_name }}
            
            **构建信息**
            - 版本: `${{ needs.setup.outputs.version }}`
            - 构建号: `${{ needs.setup.outputs.build_number }}`
            - 构建时间: `${{ github.event.head_commit.timestamp || github.run_time }}`
            - 提交: `${{ github.sha }}`
            
            **支持平台**
            - ✅ macOS Apple Silicon (M1/M2/M3)
            - ✅ Windows x64
            
            **新功能**
            - 🎯 增强的性能优化 - 大量节点时的响应速度
            - 🎨 改进的UI/UX - 加载状态和错误提示
            - 🔄 自动更新机制 - GitHub Actions 编译成功后自动更新
            - 🛡️ 内存泄漏防护 - 长时间运行稳定性
            - 🔗 核心通信稳定性 - 优化IPC连接处理
            - 🌐 跨平台兼容性 - 确保Windows/macOS/Linux一致性
            
            **下载说明**
            - macOS: 下载 `.dmg` 文件
            - Windows: 下载 `.exe` 文件
            
            ---
            > 📅 构建时间: ${{ github.event.head_commit.timestamp || github.run_time }}
            > 🔧 由 GitHub Actions 自动构建
          releaseDraft: ${{ github.event.inputs.release_type == 'stable' }}
          prerelease: ${{ github.event.inputs.release_type != 'stable' }}
          includeUpdaterJson: ${{ github.event.inputs.auto_update == 'true' }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-${{ needs.setup.outputs.version }}
          path: |
            src-tauri/target/${{ matrix.target }}/release/bundle/dmg/*.dmg
            src-tauri/target/${{ matrix.target }}/release/bundle/nsis/*.exe
          if-no-files-found: error
          retention-days: 30

  post-build:
    needs: [setup, build]
    runs-on: ubuntu-latest
    if: ${{ needs.setup.outputs.should_release == 'true' }}
    
    steps:
      - name: Trigger auto-update notification
        if: ${{ github.event.inputs.auto_update == 'true' }}
        run: |
          echo "🔄 新版本已发布，支持自动更新"
          echo "版本: ${{ needs.setup.outputs.version }}"
          echo "自动更新已启用，用户将收到更新通知"
          
          # 可以在这里添加通知webhook或其他集成
          # 例如: Discord通知、邮件通知等

      - name: Build summary
        run: |
          echo "## 🎉 构建完成总结" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 构建信息" >> $GITHUB_STEP_SUMMARY
          echo "- **版本**: \`${{ needs.setup.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **构建号**: \`${{ needs.setup.outputs.build_number }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **发布类型**: \`${{ github.event.inputs.release_type || 'beta' }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **自动更新**: \`${{ github.event.inputs.auto_update == 'true' && '✅ 启用' || '❌ 禁用' }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 构建平台" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **macOS Apple Silicon** (.dmg)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Windows x64** (.exe)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 下载链接" >> $GITHUB_STEP_SUMMARY
          echo "请访问 [Releases 页面](https://github.com/${{ github.repository }}/releases) 下载最新版本" >> $GITHUB_STEP_SUMMARY
