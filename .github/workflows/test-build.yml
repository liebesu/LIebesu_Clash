name: LIebesu_Clash - 测试构建

on:
  workflow_dispatch:
  push:
    branches:
      - fix/batch-import-preview
    paths:
      - 'src/**'
      - 'src-tauri/**'
      - 'package.json'
      - 'pnpm-lock.yaml'
      - '.github/workflows/test-build.yml'
  pull_request:
    branches:
      - main
      - master
    paths:
      - 'src/**'
      - 'src-tauri/**'
      - 'package.json'
      - 'pnpm-lock.yaml'
      - '.github/workflows/test-build.yml'

permissions: write-all

env:
  CARGO_INCREMENTAL: 0
  RUST_BACKTRACE: short

jobs:
  build-quota-feature:
    name: 构建配额删除功能
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install dependencies (macOS only)
        if: runner.os == 'macOS'
        run: |
          brew install openssl@3 pkg-config
          OPENSSL_DIR=$(brew --prefix openssl@3)
          echo "OPENSSL_DIR=$OPENSSL_DIR" >> $GITHUB_ENV
          echo "OPENSSL_LIB_DIR=$OPENSSL_DIR/lib" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=$OPENSSL_DIR/include" >> $GITHUB_ENV

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: pnpm

      - name: Install frontend dependencies
        run: pnpm install --frozen-lockfile

      - name: Download mihomo binaries
        run: pnpm prebuild

      - name: Build the app
        run: pnpm tauri build --ci
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_OPTIONS: --max-old-space-size=4096
          # 使用ad-hoc签名，减少macOS安全阻拦
          APPLE_SIGNING_IDENTITY: "-"
          VITE_BUILD_VERSION: "${{ github.run_number }}"

      - name: Post-process macOS app (remove quarantine and ad-hoc sign)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          set -e
          APP_PATH=$(find src-tauri/target -type d -path "*/release/bundle/*/*.app" | head -1)
          DMG_PATH=$(find src-tauri/target -type f -path "*/release/bundle/dmg/*.dmg" | head -1)
          echo "APP_PATH=$APP_PATH"
          echo "DMG_PATH=$DMG_PATH"
          if [[ -n "$APP_PATH" ]]; then
            xattr -cr "$APP_PATH" || true
            codesign --force --deep --sign - "$APP_PATH" || true
            codesign --verify --verbose "$APP_PATH" || true
          fi
          if [[ -n "$DMG_PATH" ]]; then
            xattr -cr "$DMG_PATH" || true
          fi
          # 附带用户修复脚本
          if [[ -f "fix-macos-app.sh" && -n "$DMG_PATH" ]]; then
            cp fix-macos-app.sh "$(dirname "$DMG_PATH")/"
            chmod +x "$(dirname "$DMG_PATH")/fix-macos-app.sh"
          fi
          if [[ -f "refresh-launchpad.sh" && -n "$DMG_PATH" ]]; then
            cp refresh-launchpad.sh "$(dirname "$DMG_PATH")/"
            chmod +x "$(dirname "$DMG_PATH")/refresh-launchpad.sh"
          fi

      - name: Rename macOS DMG with run number
        if: runner.os == 'macOS'
        shell: bash
        run: |
          set -e
          DMG_PATH=$(find src-tauri/target -type f -path "*/release/bundle/dmg/*.dmg" | head -1)
          if [[ -n "$DMG_PATH" ]]; then
            DIR=$(dirname "$DMG_PATH")
            FILE=$(basename "$DMG_PATH")
            EXT="${FILE##*.}"
            NAME="${FILE%.*}"
            NEW_NAME="${NAME}_${GITHUB_RUN_NUMBER}.${EXT}"
            mv "$DMG_PATH" "$DIR/$NEW_NAME"
            echo "Renamed to: $DIR/$NEW_NAME"
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: clash-verge-配额删除功能-${{ runner.os }}-${{ github.run_number }}
          path: |
            src-tauri/target/release/bundle
          retention-days: 3