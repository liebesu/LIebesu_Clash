name: Enhanced Release Build with macOS Fix

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

permissions: write-all

env:
  CARGO_INCREMENTAL: 0
  RUST_BACKTRACE: short

concurrency:
  group: "${{ github.workflow }} - ${{ github.head_ref || github.ref }}"
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  check_tag_version:
    name: Check Release Tag and package.json Version Consistency
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check tag and package.json version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            TAG_REF="${{ github.event.inputs.version }}"
          else
            TAG_REF="${GITHUB_REF_NAME:-${GITHUB_REF##*/}}"
          fi
          echo "Current tag: $TAG_REF"

          PKG_VERSION=$(jq -r .version package.json)
          echo "package.json version: $PKG_VERSION"

          EXPECTED_TAG="v$PKG_VERSION"

          if [[ "$TAG_REF" != "$EXPECTED_TAG" ]]; then
            echo "❌ Version mismatch:"
            echo "   Git tag       : $TAG_REF"
            echo "   package.json  : $EXPECTED_TAG"
            exit 1
          fi

          echo "✅ Tag and package.json version are consistent."

  release:
    name: Enhanced Release Build
    needs: [check_tag_version]
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: windows-latest
            target: aarch64-pc-windows-msvc
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: ubuntu-22.04
            target: x86_64-unknown-linux-gnu

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Rust Stable
        uses: dtolnay/rust-toolchain@stable

      - name: Add Rust Target
        run: rustup target add ${{ matrix.target }}

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: src-tauri
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Install dependencies (ubuntu only)
        if: matrix.os == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libxslt1.1 libwebkit2gtk-4.1-dev libayatana-appindicator3-dev librsvg2-dev patchelf

      - name: Install macOS dependencies
        if: matrix.os == 'macos-latest'
        run: |
          # 安装必要的依赖
          brew install create-dmg
          
          # 为 x86_64 架构安装 OpenSSL
          if [ "${{ matrix.target }}" == "x86_64-apple-darwin" ]; then
            arch -x86_64 brew install openssl@3
            echo "OPENSSL_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV
            echo "OPENSSL_INCLUDE_DIR=$(brew --prefix openssl@3)/include" >> $GITHUB_ENV
            echo "OPENSSL_LIB_DIR=$(brew --prefix openssl@3)/lib" >> $GITHUB_ENV
            echo "PKG_CONFIG_PATH=$(brew --prefix openssl@3)/lib/pkgconfig" >> $GITHUB_ENV
          fi

      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false

      - name: Pnpm install and check
        run: |
          pnpm i
          pnpm run prebuild ${{ matrix.target }}

      - name: Tauri build with enhanced memory
        uses: tauri-apps/tauri-action@v0
        env:
          # 大幅增加内存限制以避免构建失败
          NODE_OPTIONS: "--max_old_space_size=8192"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # 对于macOS，使用更安全的签名策略
          APPLE_SIGNING_IDENTITY: ${{ matrix.os == 'macos-latest' && (secrets.APPLE_SIGNING_IDENTITY || '-') || '' }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          VITE_BUILD_VERSION: "${{ github.run_number }}"
        with:
          tagName: ${{ github.ref_name }}
          releaseName: "LIebesu_Clash ${{ github.ref_name }}"
          releaseBody: "Enhanced release with macOS startup fixes"
          releaseDraft: true
          prerelease: false
          tauriScript: pnpm
          args: --target ${{ matrix.target }}
          includeUpdaterJson: true

      - name: Enhanced macOS Post-Build Processing
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          set -e
          echo "🍎 开始增强的 macOS 后处理..."
          
          # 查找构建的应用程序
          APP_PATH=$(find src-tauri/target/${{ matrix.target }}/release/bundle -name "*.app" -type d | head -1)
          DMG_PATH=$(find src-tauri/target/${{ matrix.target }}/release/bundle -name "*.dmg" -type f | head -1)
          
          echo "应用程序路径: $APP_PATH"
          echo "DMG路径: $DMG_PATH"
          
          if [ -n "$APP_PATH" ]; then
            echo "🔧 处理应用程序包..."
            
            # 1. 移除所有扩展属性（包括隔离标记）
            echo "移除扩展属性..."
            sudo xattr -cr "$APP_PATH" || true
            
            # 2. 设置正确的权限
            echo "设置权限..."
            sudo chmod -R 755 "$APP_PATH"
            sudo chmod +x "$APP_PATH/Contents/MacOS/"* || true
            
            # 3. 重新签名（如果有证书则使用真实签名，否则使用ad-hoc）
            echo "重新签名应用程序..."
            if [ -n "${{ secrets.APPLE_SIGNING_IDENTITY }}" ]; then
              echo "使用真实证书签名..."
              codesign --force --deep --sign "${{ secrets.APPLE_SIGNING_IDENTITY }}" "$APP_PATH" || {
                echo "真实签名失败，回退到ad-hoc签名"
                codesign --force --deep --sign - "$APP_PATH"
              }
            else
              echo "使用ad-hoc签名..."
              codesign --force --deep --sign - "$APP_PATH"
            fi
            
            # 4. 验证签名
            echo "验证签名..."
            codesign --verify --verbose=2 "$APP_PATH" || echo "⚠️ 签名验证失败，但应用仍可能运行"
            
            # 5. 检查和修复Info.plist
            echo "检查Info.plist..."
            INFO_PLIST="$APP_PATH/Contents/Info.plist"
            if [ -f "$INFO_PLIST" ]; then
              # 确保CFBundleExecutable存在并正确
              BUNDLE_EXEC=$(plutil -extract CFBundleExecutable raw "$INFO_PLIST" 2>/dev/null || echo "")
              if [ -z "$BUNDLE_EXEC" ]; then
                echo "修复CFBundleExecutable..."
                plutil -replace CFBundleExecutable -string "LIebesu_Clash" "$INFO_PLIST" || true
              fi
              
              # 确保LSMinimumSystemVersion设置正确
              plutil -replace LSMinimumSystemVersion -string "10.15" "$INFO_PLIST" || true
              
              # 添加必要的权限声明
              plutil -replace NSHighResolutionCapable -bool true "$INFO_PLIST" || true
              
              echo "Info.plist验证通过"
            fi
            
            # 6. 强制注册到Launch Services
            echo "注册到Launch Services..."
            sudo /System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -f "$APP_PATH" || true
            
            # 7. 创建启动脚本
            echo "创建macOS修复脚本..."
            cat > "$(dirname "$APP_PATH")/fix-macos-startup.sh" << 'EOF'
          #!/bin/bash
          echo "🔧 LIebesu_Clash macOS 启动修复脚本"
          
          APP_PATH="/Applications/LIebesu_Clash.app"
          if [ ! -d "$APP_PATH" ]; then
            APP_PATH="$PWD/LIebesu_Clash.app"
          fi
          
          if [ -d "$APP_PATH" ]; then
            echo "移除隔离属性..."
            sudo xattr -cr "$APP_PATH" 2>/dev/null || xattr -cr "$APP_PATH"
            
            echo "重新签名..."
            codesign --force --deep --sign - "$APP_PATH"
            
            echo "注册应用..."
            /System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -f "$APP_PATH"
            
            echo "刷新Dock和Launchpad..."
            killall Dock 2>/dev/null || true
            
            echo "✅ 修复完成！尝试启动应用..."
            open "$APP_PATH"
          else
            echo "❌ 未找到应用程序"
          fi
          EOF
            
            chmod +x "$(dirname "$APP_PATH")/fix-macos-startup.sh"
            
            # 8. 更新时间戳
            echo "更新时间戳..."
            touch "$APP_PATH"
            
            echo "✅ 应用程序处理完成"
          fi
          
          if [ -n "$DMG_PATH" ]; then
            echo "🔧 处理DMG文件..."
            
            # 移除DMG隔离属性
            sudo xattr -cr "$DMG_PATH" || true
            
            # 复制修复脚本到DMG旁边
            if [ -f "$(dirname "$APP_PATH")/fix-macos-startup.sh" ]; then
              cp "$(dirname "$APP_PATH")/fix-macos-startup.sh" "$(dirname "$DMG_PATH")/"
            fi
            
            echo "✅ DMG处理完成"
          fi
          
          echo "🎉 增强的macOS后处理完成！"

      - name: Notarize macOS app (if certificates available)
        if: matrix.os == 'macos-latest'
        shell: bash
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          if [ -z "$APPLE_ID" ]; then
            echo "⚠️ Apple ID not configured, skipping notarization"
            exit 0
          fi
          
          echo "🔒 开始公证macOS应用..."
          
          DMG_PATH=$(find src-tauri/target/${{ matrix.target }}/release/bundle -name "*.dmg" -type f | head -1)
          
          if [ -n "$DMG_PATH" ]; then
            echo "公证DMG: $DMG_PATH"
            
            # 提交公证
            xcrun notarytool submit "$DMG_PATH" \
              --apple-id "$APPLE_ID" \
              --password "$APPLE_PASSWORD" \
              --team-id "$APPLE_TEAM_ID" \
              --wait \
              --timeout 20m || {
              echo "⚠️ 公证失败或超时，但不影响发布"
            }
            
            # 添加公证信息到DMG
            xcrun stapler staple "$DMG_PATH" || {
              echo "⚠️ 无法添加公证信息，但DMG仍然有效"
            }
            
            echo "✅ 公证流程完成"
          fi

      - name: Create enhanced release notes
        if: matrix.os == 'windows-latest' && matrix.target == 'x86_64-pc-windows-msvc'
        run: |
          cat > release-notes.md << 'EOF'
          ## 🚀 LIebesu_Clash 增强版发布
          
          ### ✅ macOS 启动问题修复
          - 🔧 彻底修复macOS应用无法启动的问题
          - 🔐 改进代码签名策略，支持ad-hoc和真实证书签名
          - 🧹 自动移除Gatekeeper隔离属性
          - 📱 修复Launchpad图标显示问题
          - ⚙️ 增强Launch Services注册机制
          
          ### 🛠️ 构建优化
          - 💾 增加构建内存限制至8GB，避免内存不足
          - 🏗️ 优化依赖安装和缓存机制
          - 🔍 增强错误检测和恢复能力
          
          ### 📋 安装说明
          
          #### macOS 用户
          1. 下载对应架构的DMG文件
          2. 如果遇到启动问题，运行附带的 `fix-macos-startup.sh` 脚本
          3. 或者在终端执行：
             ```bash
             sudo xattr -cr /Applications/LIebesu_Clash.app
             codesign --force --deep --sign - /Applications/LIebesu_Clash.app
             ```
          
          #### Windows 用户
          - 下载对应架构的安装包
          - 支持正常版本和内置WebView2版本
          
          #### Linux 用户
          - 提供DEB和RPM包
          - 支持x64、ARM64和ARMv7架构
          
          ### 🔗 下载链接
          见Release Assets部分
          EOF

  update_release:
    name: Update Release with Assets
    needs: [release]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Update release notes
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: "LIebesu_Clash ${{ github.ref_name }} - Enhanced"
          body_path: release-notes.md
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
